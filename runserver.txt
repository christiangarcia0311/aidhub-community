AidHub Server Setup Instructions
===============================

Step 1: Create and Activate Virtual Environment
--------------------------------------------
Windows PowerShell:
```powershell
python -m venv env
.\env\Scripts\Activate.ps1
```

Linux/MacOS:
```bash
python3 -m venv env
source env/bin/activate
```

Step 2: Set Up Environment Variables
---------------------------------
1. Copy .env.example to .env:
```bash
cp .env.example .env
```

2. Edit .env file with your configuration:
- Generate Django secret key
- Set debug mode (True/False)
- Add allowed hosts
- Configure EmailJS settings:
  * EMAILJS_PUBLIC_KEY
  * EMAILJS_SERVICE_ID
  * EMAILJS_TEMPLATE_ID
- Add any other API keys

3. Install python-dotenv:
```bash
pip install python-dotenv
```

Step 3: Install Requirements
--------------------------
Windows/Linux/MacOS:
```bash
pip install -r requirements.txt
```

Required packages will be installed:
- django>=4.2.0
- numpy>=1.24.0
- pandas>=2.0.0
- scikit-learn>=1.0.0
- geopy>=2.4.0
- joblib>=1.3.0

Step 4: Initialize Database
-------------------------
Navigate to project directory:
```bash
cd aidhub
```

Create and apply migrations:
```bash
python manage.py makemigrations
python manage.py migrate
```

Step 5: Create Admin User (Optional)
---------------------------------
```bash
python manage.py createsuperuser
```
Follow the prompts to enter:
- Username
- Email (optional)
- Password

Step 6: Run Development Server
---------------------------
```bash
python manage.py runserver
```

Access the application:
- Main site: http://127.0.0.1:8000/
- Admin interface: http://127.0.0.1:8000/admin/

Common Issues & Solutions
=======================

1. Port Already in Use
---------------------
If port 8000 is busy, use a different port:
```bash
python manage.py runserver 8080
```

2. PowerShell Execution Policy
----------------------------
If venv activation fails in PowerShell:
```powershell
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
```

3. Package Installation Issues
---------------------------
Update pip first:
```bash
python -m pip install --upgrade pip
```

4. Database Issues
----------------
Reset database:
```bash
del db.sqlite3
rmdir /s /q donations\migrations
python manage.py makemigrations donations
python manage.py migrate
```

Linux/MacOS equivalent:
```bash
rm db.sqlite3
rm -rf donations/migrations/
python manage.py makemigrations donations
python manage.py migrate
```

5. Static Files
-------------
If static files are not loading:
```bash
python manage.py collectstatic
```

Development vs Production
=======================

For Development:
- DEBUG = True in settings.py
- Using built-in development server
- SQLite database
- Default SECRET_KEY

For Production:
1. Update settings.py:
   - Set DEBUG = False
   - Set SECRET_KEY to secure value
   - Add your domain to ALLOWED_HOSTS
   - Configure PostgreSQL/MySQL database
   - Enable CSRF middleware

2. Use production server:
   - Gunicorn (Linux)
   - Apache/mod_wsgi
   - Nginx reverse proxy

3. Set up SSL certificate

4. Configure static file serving

System Requirements
=================
- Python 3.8 or higher
- 2GB RAM minimum
- 500MB free disk space
- Internet connection (for maps functionality)
